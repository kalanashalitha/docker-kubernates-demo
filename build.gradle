plugins {
	id 'org.springframework.boot' version '2.2.0.RELEASE'
	id 'io.spring.dependency-management' version '1.0.8.RELEASE'
	id 'java'
	id "com.moowork.node" version "1.3.1"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: "com.moowork.node"

group = 'com.web'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	// https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-mongodb
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb', version: '2.2.0.RELEASE'
	implementation 'com.google.apis:google-api-services-oauth2:v1-rev155-1.25.0'
	// https://mvnrepository.com/artifact/org.apache.kafka/kafka-clients
	implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '2.5.0'
	// https://mvnrepository.com/artifact/com.twitter/hbc-core
	implementation group: 'com.twitter', name: 'hbc-core', version: '2.2.0'
	// https://mvnrepository.com/artifact/org.modelmapper/modelmapper
	implementation 'org.modelmapper:modelmapper:2.1.1'
	compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	//testImplementation 'org.springframework.security:spring-security-test'
	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-oauth2-jose
	//compile group: 'org.springframework.security', name: 'spring-security-oauth2-jose', version: '5.2.0.RELEASE'
	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-oauth2-client
	//compile group: 'org.springframework.security', name: 'spring-security-oauth2-client', version: '5.2.0.RELEASE'
}

test {
	useJUnitPlatform()
}

task buildFrontend(type: NpmTask) {
	workingDir = file("${project.projectDir}/frontend")
	args = ['run', 'webpack']
}

task copyFrontendDist(type: Copy,dependsOn:['buildFrontend']) {
	from 'frontend/dist'
	into 'src/main/resources/static'
}

processResources {
    from ('frontend/dist/') {
        into 'public'
    }
}
def profiles = 'dev'

/*buildFrontend.finalizedBy bootRun{
	args = ["--spring.profiles.active=" + profiles]
}*/

bootRun{
	args = ["--spring.profiles.active=" + profiles]
	//dependsOn(buildFrontend)
}

